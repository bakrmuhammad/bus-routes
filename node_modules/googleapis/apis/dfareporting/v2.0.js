/**
 * Copyright 2014 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* jshint maxlen: false */

'use strict';

var createAPIRequest = require('../../lib/apirequest');

/**
 * DCM/DFA Reporting And Trafficking API
 *
 * @classdesc Manage your DoubleClick Campaign Manager ad campaigns and reports.
 * @namespace dfareporting
 * @version  v2.0
 * @variation v2.0
 * @this Dfareporting
 * @param {object=} options Options for Dfareporting
 */
function Dfareporting(options) {

  var self = this;
  this._options = options || {};

  this.accountActiveAdSummaries = {

    /**
     * dfareporting.accountActiveAdSummaries.get
     *
     * @desc Gets the account's active ad summary by account ID.
     *
     * @alias dfareporting.accountActiveAdSummaries.get
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {string} params.summaryAccountId - Account ID.
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    get: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/accountActiveAdSummaries/{summaryAccountId}',
          method: 'GET'
        },
        params: params,
        requiredParams: ['profileId', 'summaryAccountId'],
        pathParams: ['profileId', 'summaryAccountId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    }

  };

  this.accountPermissionGroups = {

    /**
     * dfareporting.accountPermissionGroups.get
     *
     * @desc Gets one account permission group by ID.
     *
     * @alias dfareporting.accountPermissionGroups.get
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.id - Account permission group ID.
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    get: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/accountPermissionGroups/{id}',
          method: 'GET'
        },
        params: params,
        requiredParams: ['profileId', 'id'],
        pathParams: ['id', 'profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.accountPermissionGroups.list
     *
     * @desc Retrieves the list of account permission groups.
     *
     * @alias dfareporting.accountPermissionGroups.list
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    list: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/accountPermissionGroups',
          method: 'GET'
        },
        params: params,
        requiredParams: ['profileId'],
        pathParams: ['profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    }

  };

  this.accountPermissions = {

    /**
     * dfareporting.accountPermissions.get
     *
     * @desc Gets one account permission by ID.
     *
     * @alias dfareporting.accountPermissions.get
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.id - Account permission ID.
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    get: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/accountPermissions/{id}',
          method: 'GET'
        },
        params: params,
        requiredParams: ['profileId', 'id'],
        pathParams: ['id', 'profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.accountPermissions.list
     *
     * @desc Retrieves the list of account permissions.
     *
     * @alias dfareporting.accountPermissions.list
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    list: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/accountPermissions',
          method: 'GET'
        },
        params: params,
        requiredParams: ['profileId'],
        pathParams: ['profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    }

  };

  this.accountUserProfiles = {

    /**
     * dfareporting.accountUserProfiles.get
     *
     * @desc Gets one account user profile by ID.
     *
     * @alias dfareporting.accountUserProfiles.get
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.id - User profile ID.
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    get: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/accountUserProfiles/{id}',
          method: 'GET'
        },
        params: params,
        requiredParams: ['profileId', 'id'],
        pathParams: ['id', 'profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.accountUserProfiles.list
     *
     * @desc Retrieves a list of account user profiles, possibly filtered.
     *
     * @alias dfareporting.accountUserProfiles.list
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {boolean=} params.active - Select only active user profiles.
     * @param  {string=} params.ids - Select only user profiles with these IDs.
     * @param  {integer=} params.maxResults - Maximum number of results to return.
     * @param  {string=} params.pageToken - Value of the nextPageToken from the previous result page.
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {string=} params.searchString - Allows searching for objects by name, ID or email. Wildcards (*) are allowed. For example, "user profile*2015" will return objects with names like "user profile June 2015", "user profile April 2015", or simply "user profile 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "user profile" will match objects with name "my user profile", "user profile 2015", or simply "user profile".
     * @param  {string=} params.sortField - Field by which to sort the list.
     * @param  {string=} params.sortOrder - Order of sorted results, default is ASCENDING.
     * @param  {string=} params.subaccountId - Select only user profiles with the specified subaccount ID.
     * @param  {string=} params.userRoleId - Select only user profiles with the specified user role ID.
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    list: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/accountUserProfiles',
          method: 'GET'
        },
        params: params,
        requiredParams: ['profileId'],
        pathParams: ['profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.accountUserProfiles.patch
     *
     * @desc Updates an existing account user profile. This method supports patch semantics.
     *
     * @alias dfareporting.accountUserProfiles.patch
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.id - User profile ID.
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {object} params.resource - Request body data
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    patch: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/accountUserProfiles',
          method: 'PATCH'
        },
        params: params,
        requiredParams: ['profileId', 'id'],
        pathParams: ['profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.accountUserProfiles.update
     *
     * @desc Updates an existing account user profile.
     *
     * @alias dfareporting.accountUserProfiles.update
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {object} params.resource - Request body data
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    update: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/accountUserProfiles',
          method: 'PUT'
        },
        params: params,
        requiredParams: ['profileId'],
        pathParams: ['profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    }

  };

  this.accounts = {

    /**
     * dfareporting.accounts.get
     *
     * @desc Gets one account by ID.
     *
     * @alias dfareporting.accounts.get
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.id - Account ID.
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    get: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/accounts/{id}',
          method: 'GET'
        },
        params: params,
        requiredParams: ['profileId', 'id'],
        pathParams: ['id', 'profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.accounts.list
     *
     * @desc Retrieves the list of accounts, possibly filtered.
     *
     * @alias dfareporting.accounts.list
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {boolean=} params.active - Select only active accounts. Don't set this field to select both active and non-active accounts.
     * @param  {string=} params.ids - Select only accounts with these IDs.
     * @param  {integer=} params.maxResults - Maximum number of results to return.
     * @param  {string=} params.pageToken - Value of the nextPageToken from the previous result page.
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {string=} params.searchString - Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "account*2015" will return objects with names like "account June 2015", "account April 2015", or simply "account 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "account" will match objects with name "my account", "account 2015", or simply "account".
     * @param  {string=} params.sortField - Field by which to sort the list.
     * @param  {string=} params.sortOrder - Order of sorted results, default is ASCENDING.
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    list: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/accounts',
          method: 'GET'
        },
        params: params,
        requiredParams: ['profileId'],
        pathParams: ['profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.accounts.patch
     *
     * @desc Updates an existing account. This method supports patch semantics.
     *
     * @alias dfareporting.accounts.patch
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.id - Account ID.
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {object} params.resource - Request body data
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    patch: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/accounts',
          method: 'PATCH'
        },
        params: params,
        requiredParams: ['profileId', 'id'],
        pathParams: ['profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.accounts.update
     *
     * @desc Updates an existing account.
     *
     * @alias dfareporting.accounts.update
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {object} params.resource - Request body data
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    update: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/accounts',
          method: 'PUT'
        },
        params: params,
        requiredParams: ['profileId'],
        pathParams: ['profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    }

  };

  this.ads = {

    /**
     * dfareporting.ads.get
     *
     * @desc Gets one ad by ID.
     *
     * @alias dfareporting.ads.get
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.id - Ad ID.
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    get: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/ads/{id}',
          method: 'GET'
        },
        params: params,
        requiredParams: ['profileId', 'id'],
        pathParams: ['id', 'profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.ads.insert
     *
     * @desc Inserts a new ad.
     *
     * @alias dfareporting.ads.insert
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {object} params.resource - Request body data
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    insert: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/ads',
          method: 'POST'
        },
        params: params,
        requiredParams: ['profileId'],
        pathParams: ['profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.ads.list
     *
     * @desc Retrieves a list of ads, possibly filtered.
     *
     * @alias dfareporting.ads.list
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {boolean=} params.active - Select only active ads.
     * @param  {string=} params.advertiserId - Select only ads with this advertiser ID.
     * @param  {boolean=} params.archived - Select only archived ads.
     * @param  {string=} params.audienceSegmentIds - Select only ads with these audience segment IDs.
     * @param  {string=} params.campaignIds - Select only ads with these campaign IDs.
     * @param  {string=} params.compatibility - Select default ads with the specified compatibility. Applicable when type is AD_SERVING_DEFAULT_AD. WEB and WEB_INTERSTITIAL refer to rendering either on desktop or on mobile devices for regular or interstitial ads, respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. IN_STREAM_VIDEO refers to rendering an in-stream video ads developed with the VAST standard.
     * @param  {string=} params.creativeIds - Select only ads with these creative IDs assigned.
     * @param  {string=} params.creativeOptimizationConfigurationIds - Select only ads with these creative optimization configuration IDs.
     * @param  {string=} params.creativeType - Select only ads with the specified creativeType.
     * @param  {boolean=} params.dynamicClickTracker - Select only dynamic click trackers. Applicable when type is AD_SERVING_CLICK_TRACKER. If true, select dynamic click trackers. If false, select static click trackers. Leave unset to select both.
     * @param  {string=} params.ids - Select only ads with these IDs.
     * @param  {string=} params.landingPageIds - Select only ads with these landing page IDs.
     * @param  {integer=} params.maxResults - Maximum number of results to return.
     * @param  {string=} params.overriddenEventTagId - Select only ads with this event tag override ID.
     * @param  {string=} params.pageToken - Value of the nextPageToken from the previous result page.
     * @param  {string=} params.placementIds - Select only ads with these placement IDs assigned.
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {string=} params.remarketingListIds - Select only ads whose list targeting expression use these remarketing list IDs.
     * @param  {string=} params.searchString - Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "ad*2015" will return objects with names like "ad June 2015", "ad April 2015", or simply "ad 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "ad" will match objects with name "my ad", "ad 2015", or simply "ad".
     * @param  {string=} params.sizeIds - Select only ads with these size IDs.
     * @param  {string=} params.sortField - Field by which to sort the list.
     * @param  {string=} params.sortOrder - Order of sorted results, default is ASCENDING.
     * @param  {boolean=} params.sslCompliant - Select only ads that are SSL-compliant.
     * @param  {boolean=} params.sslRequired - Select only ads that require SSL.
     * @param  {string=} params.type - Select only ads with these types.
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    list: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/ads',
          method: 'GET'
        },
        params: params,
        requiredParams: ['profileId'],
        pathParams: ['profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.ads.patch
     *
     * @desc Updates an existing ad. This method supports patch semantics.
     *
     * @alias dfareporting.ads.patch
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.id - Ad ID.
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {object} params.resource - Request body data
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    patch: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/ads',
          method: 'PATCH'
        },
        params: params,
        requiredParams: ['profileId', 'id'],
        pathParams: ['profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.ads.update
     *
     * @desc Updates an existing ad.
     *
     * @alias dfareporting.ads.update
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {object} params.resource - Request body data
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    update: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/ads',
          method: 'PUT'
        },
        params: params,
        requiredParams: ['profileId'],
        pathParams: ['profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    }

  };

  this.advertiserGroups = {

    /**
     * dfareporting.advertiserGroups.delete
     *
     * @desc Deletes an existing advertiser group.
     *
     * @alias dfareporting.advertiserGroups.delete
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.id - Advertiser group ID.
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    delete: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/advertiserGroups/{id}',
          method: 'DELETE'
        },
        params: params,
        requiredParams: ['profileId', 'id'],
        pathParams: ['id', 'profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.advertiserGroups.get
     *
     * @desc Gets one advertiser group by ID.
     *
     * @alias dfareporting.advertiserGroups.get
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.id - Advertiser group ID.
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    get: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/advertiserGroups/{id}',
          method: 'GET'
        },
        params: params,
        requiredParams: ['profileId', 'id'],
        pathParams: ['id', 'profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.advertiserGroups.insert
     *
     * @desc Inserts a new advertiser group.
     *
     * @alias dfareporting.advertiserGroups.insert
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {object} params.resource - Request body data
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    insert: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/advertiserGroups',
          method: 'POST'
        },
        params: params,
        requiredParams: ['profileId'],
        pathParams: ['profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.advertiserGroups.list
     *
     * @desc Retrieves a list of advertiser groups, possibly filtered.
     *
     * @alias dfareporting.advertiserGroups.list
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string=} params.ids - Select only advertiser groups with these IDs.
     * @param  {integer=} params.maxResults - Maximum number of results to return.
     * @param  {string=} params.pageToken - Value of the nextPageToken from the previous result page.
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {string=} params.searchString - Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "advertiser*2015" will return objects with names like "advertiser group June 2015", "advertiser group April 2015", or simply "advertiser group 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "advertisergroup" will match objects with name "my advertisergroup", "advertisergroup 2015", or simply "advertisergroup".
     * @param  {string=} params.sortField - Field by which to sort the list.
     * @param  {string=} params.sortOrder - Order of sorted results, default is ASCENDING.
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    list: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/advertiserGroups',
          method: 'GET'
        },
        params: params,
        requiredParams: ['profileId'],
        pathParams: ['profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.advertiserGroups.patch
     *
     * @desc Updates an existing advertiser group. This method supports patch semantics.
     *
     * @alias dfareporting.advertiserGroups.patch
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.id - Advertiser group ID.
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {object} params.resource - Request body data
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    patch: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/advertiserGroups',
          method: 'PATCH'
        },
        params: params,
        requiredParams: ['profileId', 'id'],
        pathParams: ['profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.advertiserGroups.update
     *
     * @desc Updates an existing advertiser group.
     *
     * @alias dfareporting.advertiserGroups.update
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {object} params.resource - Request body data
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    update: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/advertiserGroups',
          method: 'PUT'
        },
        params: params,
        requiredParams: ['profileId'],
        pathParams: ['profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    }

  };

  this.advertisers = {

    /**
     * dfareporting.advertisers.get
     *
     * @desc Gets one advertiser by ID.
     *
     * @alias dfareporting.advertisers.get
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.id - Advertiser ID.
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    get: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/advertisers/{id}',
          method: 'GET'
        },
        params: params,
        requiredParams: ['profileId', 'id'],
        pathParams: ['id', 'profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.advertisers.insert
     *
     * @desc Inserts a new advertiser.
     *
     * @alias dfareporting.advertisers.insert
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {object} params.resource - Request body data
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    insert: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/advertisers',
          method: 'POST'
        },
        params: params,
        requiredParams: ['profileId'],
        pathParams: ['profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.advertisers.list
     *
     * @desc Retrieves a list of advertisers, possibly filtered.
     *
     * @alias dfareporting.advertisers.list
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string=} params.advertiserGroupIds - Select only advertisers with these advertiser group IDs.
     * @param  {string=} params.floodlightConfigurationIds - Select only advertisers with these floodlight configuration IDs.
     * @param  {string=} params.ids - Select only advertisers with these IDs.
     * @param  {boolean=} params.includeAdvertisersWithoutGroupsOnly - Select only advertisers which do not belong to any advertiser group.
     * @param  {integer=} params.maxResults - Maximum number of results to return.
     * @param  {boolean=} params.onlyParent - Select only advertisers which use another advertiser's floodlight configuration.
     * @param  {string=} params.pageToken - Value of the nextPageToken from the previous result page.
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {string=} params.searchString - Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "advertiser*2015" will return objects with names like "advertiser June 2015", "advertiser April 2015", or simply "advertiser 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "advertiser" will match objects with name "my advertiser", "advertiser 2015", or simply "advertiser".
     * @param  {string=} params.sortField - Field by which to sort the list.
     * @param  {string=} params.sortOrder - Order of sorted results, default is ASCENDING.
     * @param  {string=} params.status - Select only advertisers with the specified status.
     * @param  {string=} params.subaccountId - Select only advertisers with these subaccount IDs.
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    list: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/advertisers',
          method: 'GET'
        },
        params: params,
        requiredParams: ['profileId'],
        pathParams: ['profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.advertisers.patch
     *
     * @desc Updates an existing advertiser. This method supports patch semantics.
     *
     * @alias dfareporting.advertisers.patch
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.id - Advertiser ID.
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {object} params.resource - Request body data
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    patch: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/advertisers',
          method: 'PATCH'
        },
        params: params,
        requiredParams: ['profileId', 'id'],
        pathParams: ['profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.advertisers.update
     *
     * @desc Updates an existing advertiser.
     *
     * @alias dfareporting.advertisers.update
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {object} params.resource - Request body data
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    update: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/advertisers',
          method: 'PUT'
        },
        params: params,
        requiredParams: ['profileId'],
        pathParams: ['profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    }

  };

  this.browsers = {

    /**
     * dfareporting.browsers.list
     *
     * @desc Retrieves a list of browsers.
     *
     * @alias dfareporting.browsers.list
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    list: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/browsers',
          method: 'GET'
        },
        params: params,
        requiredParams: ['profileId'],
        pathParams: ['profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    }

  };

  this.campaignCreativeAssociations = {

    /**
     * dfareporting.campaignCreativeAssociations.insert
     *
     * @desc Associates a creative with the specified campaign. This method creates a default ad with dimensions matching the creative in the campaign if such a default ad does not exist already.
     *
     * @alias dfareporting.campaignCreativeAssociations.insert
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.campaignId - Campaign ID in this association.
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {object} params.resource - Request body data
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    insert: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/campaigns/{campaignId}/campaignCreativeAssociations',
          method: 'POST'
        },
        params: params,
        requiredParams: ['profileId', 'campaignId'],
        pathParams: ['campaignId', 'profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.campaignCreativeAssociations.list
     *
     * @desc Retrieves the list of creative IDs associated with the specified campaign.
     *
     * @alias dfareporting.campaignCreativeAssociations.list
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.campaignId - Campaign ID in this association.
     * @param  {integer=} params.maxResults - Maximum number of results to return.
     * @param  {string=} params.pageToken - Value of the nextPageToken from the previous result page.
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {string=} params.sortOrder - Order of sorted results, default is ASCENDING.
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    list: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/campaigns/{campaignId}/campaignCreativeAssociations',
          method: 'GET'
        },
        params: params,
        requiredParams: ['profileId', 'campaignId'],
        pathParams: ['campaignId', 'profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    }

  };

  this.campaigns = {

    /**
     * dfareporting.campaigns.get
     *
     * @desc Gets one campaign by ID.
     *
     * @alias dfareporting.campaigns.get
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.id - Campaign ID.
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    get: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/campaigns/{id}',
          method: 'GET'
        },
        params: params,
        requiredParams: ['profileId', 'id'],
        pathParams: ['id', 'profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.campaigns.insert
     *
     * @desc Inserts a new campaign.
     *
     * @alias dfareporting.campaigns.insert
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.defaultLandingPageName - Default landing page name for this new campaign. Must be less than 256 characters long.
     * @param  {string} params.defaultLandingPageUrl - Default landing page URL for this new campaign.
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {object} params.resource - Request body data
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    insert: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/campaigns',
          method: 'POST'
        },
        params: params,
        requiredParams: ['profileId', 'defaultLandingPageName', 'defaultLandingPageUrl'],
        pathParams: ['profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.campaigns.list
     *
     * @desc Retrieves a list of campaigns, possibly filtered.
     *
     * @alias dfareporting.campaigns.list
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string=} params.advertiserGroupIds - Select only campaigns whose advertisers belong to these advertiser groups.
     * @param  {string=} params.advertiserIds - Select only campaigns that belong to these advertisers.
     * @param  {boolean=} params.archived - Select only archived campaigns. Don't set this field to select both archived and non-archived campaigns.
     * @param  {boolean=} params.atLeastOneOptimizationActivity - Select only campaigns that have at least one optimization activity.
     * @param  {string=} params.excludedIds - Exclude campaigns with these IDs.
     * @param  {string=} params.ids - Select only campaigns with these IDs.
     * @param  {integer=} params.maxResults - Maximum number of results to return.
     * @param  {string=} params.overriddenEventTagId - Select only campaigns that have overridden this event tag ID.
     * @param  {string=} params.pageToken - Value of the nextPageToken from the previous result page.
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {string=} params.searchString - Allows searching for campaigns by name or ID. Wildcards (*) are allowed. For example, "campaign*2015" will return campaigns with names like "campaign June 2015", "campaign April 2015", or simply "campaign 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "campaign" will match campaigns with name "my campaign", "campaign 2015", or simply "campaign".
     * @param  {string=} params.sortField - Field by which to sort the list.
     * @param  {string=} params.sortOrder - Order of sorted results, default is ASCENDING.
     * @param  {string=} params.subaccountId - Select only campaigns that belong to this subaccount.
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    list: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/campaigns',
          method: 'GET'
        },
        params: params,
        requiredParams: ['profileId'],
        pathParams: ['profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.campaigns.patch
     *
     * @desc Updates an existing campaign. This method supports patch semantics.
     *
     * @alias dfareporting.campaigns.patch
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.id - Campaign ID.
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {object} params.resource - Request body data
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    patch: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/campaigns',
          method: 'PATCH'
        },
        params: params,
        requiredParams: ['profileId', 'id'],
        pathParams: ['profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.campaigns.update
     *
     * @desc Updates an existing campaign.
     *
     * @alias dfareporting.campaigns.update
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {object} params.resource - Request body data
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    update: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/campaigns',
          method: 'PUT'
        },
        params: params,
        requiredParams: ['profileId'],
        pathParams: ['profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    }

  };

  this.changeLogs = {

    /**
     * dfareporting.changeLogs.get
     *
     * @desc Gets one change log by ID.
     *
     * @alias dfareporting.changeLogs.get
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.id - Change log ID.
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    get: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/changeLogs/{id}',
          method: 'GET'
        },
        params: params,
        requiredParams: ['profileId', 'id'],
        pathParams: ['id', 'profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.changeLogs.list
     *
     * @desc Retrieves a list of change logs.
     *
     * @alias dfareporting.changeLogs.list
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string=} params.action - Select only change logs with the specified action.
     * @param  {string=} params.ids - Select only change logs with these IDs.
     * @param  {string=} params.maxChangeTime - Select only change logs whose change time is before the specified maxChangeTime.The time should be formatted as an RFC3339 date/time string. For example, for 10:54 PM on July 18th, 2015, in the America/New York time zone, the format is "2015-07-18T22:54:00-04:00". In other words, the year, month, day, the letter T, the hour (24-hour clock system), minute, second, and then the time zone offset.
     * @param  {integer=} params.maxResults - Maximum number of results to return.
     * @param  {string=} params.minChangeTime - Select only change logs whose change time is before the specified minChangeTime.The time should be formatted as an RFC3339 date/time string. For example, for 10:54 PM on July 18th, 2015, in the America/New York time zone, the format is "2015-07-18T22:54:00-04:00". In other words, the year, month, day, the letter T, the hour (24-hour clock system), minute, second, and then the time zone offset.
     * @param  {string=} params.objectIds - Select only change logs with these object IDs.
     * @param  {string=} params.objectType - Select only change logs with the specified object type.
     * @param  {string=} params.pageToken - Value of the nextPageToken from the previous result page.
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {string=} params.searchString - Select only change logs whose object ID, user name, old or new values match the search string.
     * @param  {string=} params.userProfileIds - Select only change logs with these user profile IDs.
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    list: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/changeLogs',
          method: 'GET'
        },
        params: params,
        requiredParams: ['profileId'],
        pathParams: ['profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    }

  };

  this.cities = {

    /**
     * dfareporting.cities.list
     *
     * @desc Retrieves a list of cities, possibly filtered.
     *
     * @alias dfareporting.cities.list
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string=} params.countryDartIds - Select only cities from these countries.
     * @param  {string=} params.dartIds - Select only cities with these DART IDs.
     * @param  {string=} params.namePrefix - Select only cities with names starting with this prefix.
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {string=} params.regionDartIds - Select only cities from these regions.
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    list: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/cities',
          method: 'GET'
        },
        params: params,
        requiredParams: ['profileId'],
        pathParams: ['profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    }

  };

  this.connectionTypes = {

    /**
     * dfareporting.connectionTypes.list
     *
     * @desc Retrieves a list of connection types.
     *
     * @alias dfareporting.connectionTypes.list
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    list: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/connectionTypes',
          method: 'GET'
        },
        params: params,
        requiredParams: ['profileId'],
        pathParams: ['profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    }

  };

  this.contentCategories = {

    /**
     * dfareporting.contentCategories.delete
     *
     * @desc Deletes an existing content category.
     *
     * @alias dfareporting.contentCategories.delete
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.id - Content category ID.
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    delete: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/contentCategories/{id}',
          method: 'DELETE'
        },
        params: params,
        requiredParams: ['profileId', 'id'],
        pathParams: ['id', 'profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.contentCategories.get
     *
     * @desc Gets one content category by ID.
     *
     * @alias dfareporting.contentCategories.get
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.id - Content category ID.
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    get: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/contentCategories/{id}',
          method: 'GET'
        },
        params: params,
        requiredParams: ['profileId', 'id'],
        pathParams: ['id', 'profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.contentCategories.insert
     *
     * @desc Inserts a new content category.
     *
     * @alias dfareporting.contentCategories.insert
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {object} params.resource - Request body data
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    insert: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/contentCategories',
          method: 'POST'
        },
        params: params,
        requiredParams: ['profileId'],
        pathParams: ['profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.contentCategories.list
     *
     * @desc Retrieves a list of content categories, possibly filtered.
     *
     * @alias dfareporting.contentCategories.list
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string=} params.ids - Select only content categories with these IDs.
     * @param  {integer=} params.maxResults - Maximum number of results to return.
     * @param  {string=} params.pageToken - Value of the nextPageToken from the previous result page.
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {string=} params.searchString - Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "contentcategory*2015" will return objects with names like "contentcategory June 2015", "contentcategory April 2015", or simply "contentcategory 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "contentcategory" will match objects with name "my contentcategory", "contentcategory 2015", or simply "contentcategory".
     * @param  {string=} params.sortField - Field by which to sort the list.
     * @param  {string=} params.sortOrder - Order of sorted results, default is ASCENDING.
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    list: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/contentCategories',
          method: 'GET'
        },
        params: params,
        requiredParams: ['profileId'],
        pathParams: ['profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.contentCategories.patch
     *
     * @desc Updates an existing content category. This method supports patch semantics.
     *
     * @alias dfareporting.contentCategories.patch
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.id - Content category ID.
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {object} params.resource - Request body data
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    patch: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/contentCategories',
          method: 'PATCH'
        },
        params: params,
        requiredParams: ['profileId', 'id'],
        pathParams: ['profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.contentCategories.update
     *
     * @desc Updates an existing content category.
     *
     * @alias dfareporting.contentCategories.update
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {object} params.resource - Request body data
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    update: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/contentCategories',
          method: 'PUT'
        },
        params: params,
        requiredParams: ['profileId'],
        pathParams: ['profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    }

  };

  this.countries = {

    /**
     * dfareporting.countries.get
     *
     * @desc Gets one country by ID.
     *
     * @alias dfareporting.countries.get
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.dartId - Country DART ID.
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    get: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/countries/{dartId}',
          method: 'GET'
        },
        params: params,
        requiredParams: ['profileId', 'dartId'],
        pathParams: ['dartId', 'profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.countries.list
     *
     * @desc Retrieves a list of countries.
     *
     * @alias dfareporting.countries.list
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    list: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/countries',
          method: 'GET'
        },
        params: params,
        requiredParams: ['profileId'],
        pathParams: ['profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    }

  };

  this.creativeAssets = {

    /**
     * dfareporting.creativeAssets.insert
     *
     * @desc Inserts a new creative asset.
     *
     * @alias dfareporting.creativeAssets.insert
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.advertiserId - Advertiser ID of this creative. This is a required field.
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {object} params.resource - Media resource metadata
     * @param  {object} params.media - Media object
     * @param  {string} params.media.mimeType - Media mime-type
     * @param  {string|object} params.media.body - Media body contents
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    insert: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/creativeAssets/{advertiserId}/creativeAssets',
          method: 'POST'
        },
        params: params,
        mediaUrl: 'https://www.googleapis.com/upload/dfareporting/v2.0/userprofiles/{profileId}/creativeAssets/{advertiserId}/creativeAssets',
        requiredParams: ['profileId', 'advertiserId'],
        pathParams: ['advertiserId', 'profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    }

  };

  this.creativeFieldValues = {

    /**
     * dfareporting.creativeFieldValues.delete
     *
     * @desc Deletes an existing creative field value.
     *
     * @alias dfareporting.creativeFieldValues.delete
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.creativeFieldId - Creative field ID for this creative field value.
     * @param  {string} params.id - Creative Field Value ID
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    delete: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues/{id}',
          method: 'DELETE'
        },
        params: params,
        requiredParams: ['profileId', 'creativeFieldId', 'id'],
        pathParams: ['creativeFieldId', 'id', 'profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.creativeFieldValues.get
     *
     * @desc Gets one creative field value by ID.
     *
     * @alias dfareporting.creativeFieldValues.get
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.creativeFieldId - Creative field ID for this creative field value.
     * @param  {string} params.id - Creative Field Value ID
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    get: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues/{id}',
          method: 'GET'
        },
        params: params,
        requiredParams: ['profileId', 'creativeFieldId', 'id'],
        pathParams: ['creativeFieldId', 'id', 'profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.creativeFieldValues.insert
     *
     * @desc Inserts a new creative field value.
     *
     * @alias dfareporting.creativeFieldValues.insert
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.creativeFieldId - Creative field ID for this creative field value.
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {object} params.resource - Request body data
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    insert: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues',
          method: 'POST'
        },
        params: params,
        requiredParams: ['profileId', 'creativeFieldId'],
        pathParams: ['creativeFieldId', 'profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.creativeFieldValues.list
     *
     * @desc Retrieves a list of creative field values, possibly filtered.
     *
     * @alias dfareporting.creativeFieldValues.list
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.creativeFieldId - Creative field ID for this creative field value.
     * @param  {string=} params.ids - Select only creative field values with these IDs.
     * @param  {integer=} params.maxResults - Maximum number of results to return.
     * @param  {string=} params.pageToken - Value of the nextPageToken from the previous result page.
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {string=} params.searchString - Allows searching for creative field values by their values. Wildcards (e.g. *) are not allowed.
     * @param  {string=} params.sortField - Field by which to sort the list.
     * @param  {string=} params.sortOrder - Order of sorted results, default is ASCENDING.
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    list: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues',
          method: 'GET'
        },
        params: params,
        requiredParams: ['profileId', 'creativeFieldId'],
        pathParams: ['creativeFieldId', 'profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.creativeFieldValues.patch
     *
     * @desc Updates an existing creative field value. This method supports patch semantics.
     *
     * @alias dfareporting.creativeFieldValues.patch
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.creativeFieldId - Creative field ID for this creative field value.
     * @param  {string} params.id - Creative Field Value ID
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {object} params.resource - Request body data
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    patch: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues',
          method: 'PATCH'
        },
        params: params,
        requiredParams: ['profileId', 'creativeFieldId', 'id'],
        pathParams: ['creativeFieldId', 'profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.creativeFieldValues.update
     *
     * @desc Updates an existing creative field value.
     *
     * @alias dfareporting.creativeFieldValues.update
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.creativeFieldId - Creative field ID for this creative field value.
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {object} params.resource - Request body data
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    update: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues',
          method: 'PUT'
        },
        params: params,
        requiredParams: ['profileId', 'creativeFieldId'],
        pathParams: ['creativeFieldId', 'profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    }

  };

  this.creativeFields = {

    /**
     * dfareporting.creativeFields.delete
     *
     * @desc Deletes an existing creative field.
     *
     * @alias dfareporting.creativeFields.delete
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.id - Creative Field ID
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    delete: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/creativeFields/{id}',
          method: 'DELETE'
        },
        params: params,
        requiredParams: ['profileId', 'id'],
        pathParams: ['id', 'profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.creativeFields.get
     *
     * @desc Gets one creative field by ID.
     *
     * @alias dfareporting.creativeFields.get
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.id - Creative Field ID
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    get: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/creativeFields/{id}',
          method: 'GET'
        },
        params: params,
        requiredParams: ['profileId', 'id'],
        pathParams: ['id', 'profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.creativeFields.insert
     *
     * @desc Inserts a new creative field.
     *
     * @alias dfareporting.creativeFields.insert
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {object} params.resource - Request body data
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    insert: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/creativeFields',
          method: 'POST'
        },
        params: params,
        requiredParams: ['profileId'],
        pathParams: ['profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.creativeFields.list
     *
     * @desc Retrieves a list of creative fields, possibly filtered.
     *
     * @alias dfareporting.creativeFields.list
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string=} params.advertiserIds - Select only creative fields that belong to these advertisers.
     * @param  {string=} params.ids - Select only creative fields with these IDs.
     * @param  {integer=} params.maxResults - Maximum number of results to return.
     * @param  {string=} params.pageToken - Value of the nextPageToken from the previous result page.
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {string=} params.searchString - Allows searching for creative fields by name or ID. Wildcards (*) are allowed. For example, "creativefield*2015" will return creative fields with names like "creativefield June 2015", "creativefield April 2015", or simply "creativefield 2015". Most of the searches also add wild-cards implicitly at the start and the end of the search string. For example, a search string of "creativefield" will match creative fields with the name "my creativefield", "creativefield 2015", or simply "creativefield".
     * @param  {string=} params.sortField - Field by which to sort the list.
     * @param  {string=} params.sortOrder - Order of sorted results, default is ASCENDING.
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    list: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/creativeFields',
          method: 'GET'
        },
        params: params,
        requiredParams: ['profileId'],
        pathParams: ['profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.creativeFields.patch
     *
     * @desc Updates an existing creative field. This method supports patch semantics.
     *
     * @alias dfareporting.creativeFields.patch
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.id - Creative Field ID
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {object} params.resource - Request body data
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    patch: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/creativeFields',
          method: 'PATCH'
        },
        params: params,
        requiredParams: ['profileId', 'id'],
        pathParams: ['profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.creativeFields.update
     *
     * @desc Updates an existing creative field.
     *
     * @alias dfareporting.creativeFields.update
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {object} params.resource - Request body data
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    update: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/creativeFields',
          method: 'PUT'
        },
        params: params,
        requiredParams: ['profileId'],
        pathParams: ['profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    }

  };

  this.creativeGroups = {

    /**
     * dfareporting.creativeGroups.get
     *
     * @desc Gets one creative group by ID.
     *
     * @alias dfareporting.creativeGroups.get
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.id - Creative group ID.
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    get: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/creativeGroups/{id}',
          method: 'GET'
        },
        params: params,
        requiredParams: ['profileId', 'id'],
        pathParams: ['id', 'profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.creativeGroups.insert
     *
     * @desc Inserts a new creative group.
     *
     * @alias dfareporting.creativeGroups.insert
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {object} params.resource - Request body data
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    insert: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/creativeGroups',
          method: 'POST'
        },
        params: params,
        requiredParams: ['profileId'],
        pathParams: ['profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.creativeGroups.list
     *
     * @desc Retrieves a list of creative groups, possibly filtered.
     *
     * @alias dfareporting.creativeGroups.list
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string=} params.advertiserIds - Select only creative groups that belong to these advertisers.
     * @param  {integer=} params.groupNumber - Select only creative groups that belong to this subgroup.
     * @param  {string=} params.ids - Select only creative groups with these IDs.
     * @param  {integer=} params.maxResults - Maximum number of results to return.
     * @param  {string=} params.pageToken - Value of the nextPageToken from the previous result page.
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {string=} params.searchString - Allows searching for creative groups by name or ID. Wildcards (*) are allowed. For example, "creativegroup*2015" will return creative groups with names like "creativegroup June 2015", "creativegroup April 2015", or simply "creativegroup 2015". Most of the searches also add wild-cards implicitly at the start and the end of the search string. For example, a search string of "creativegroup" will match creative groups with the name "my creativegroup", "creativegroup 2015", or simply "creativegroup".
     * @param  {string=} params.sortField - Field by which to sort the list.
     * @param  {string=} params.sortOrder - Order of sorted results, default is ASCENDING.
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    list: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/creativeGroups',
          method: 'GET'
        },
        params: params,
        requiredParams: ['profileId'],
        pathParams: ['profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.creativeGroups.patch
     *
     * @desc Updates an existing creative group. This method supports patch semantics.
     *
     * @alias dfareporting.creativeGroups.patch
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.id - Creative group ID.
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {object} params.resource - Request body data
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    patch: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/creativeGroups',
          method: 'PATCH'
        },
        params: params,
        requiredParams: ['profileId', 'id'],
        pathParams: ['profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.creativeGroups.update
     *
     * @desc Updates an existing creative group.
     *
     * @alias dfareporting.creativeGroups.update
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {object} params.resource - Request body data
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    update: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/creativeGroups',
          method: 'PUT'
        },
        params: params,
        requiredParams: ['profileId'],
        pathParams: ['profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    }

  };

  this.creatives = {

    /**
     * dfareporting.creatives.get
     *
     * @desc Gets one creative by ID.
     *
     * @alias dfareporting.creatives.get
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.id - Creative ID.
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    get: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/creatives/{id}',
          method: 'GET'
        },
        params: params,
        requiredParams: ['profileId', 'id'],
        pathParams: ['id', 'profileId'],
        context: self
      };

      return createAPIRequest(parameters, callback);
    },

    /**
     * dfareporting.creatives.insert
     *
     * @desc Inserts a new creative.
     *
     * @alias dfareporting.creatives.insert
     * @memberOf! dfareporting(v2.0)
     *
     * @param  {object} params - Parameters for request
     * @param  {string} params.profileId - User profile ID associated with this request.
     * @param  {object} params.resource - Request body data
     * @param  {callback} callback - The callback that handles the response.
     * @return {object} Request object
     */
    insert: function(params, callback) {
      var parameters = {
        options: {
          url: 'https://www.googleapis.com/dfareporting/v2.0/userprofiles/{profileId}/creatives',
          method: 'P